# -*- mode: ruby -*-
# vi: set ft=ruby :

# createNode(obj)
# obj{quantity,cpus,memory}

require "yaml"

vagrant_root = File.dirname(File.expand_path(__FILE__))
cluster_config_data = YAML.load_file "#{vagrant_root}/cluster_config.yaml"
cc = cluster_config_data["cluster_config"]

CLUSTER_NAME=cc["name"]
BOX_NAME="ubuntu/focal64"
SHARED_PATH="shared"

#CLUSTER_NAME="k8smd1000"
#IP_NW="192.168.56."
#IP_START="2"
#PORTS=[57620,53654,51234]

nodes = cc["nodes"]

def increase_last_octet(ip_address)
  # Divide o endereço IP em octetos separados
  octets = ip_address.split('.')
  
  # Converte o último octeto em um número inteiro e aumenta em 1
  last_octet = octets.last.to_i + 1
 
  if last_octet == 1 
    last_octet += 1
  end
 
  # Verifica se o último octeto não ultrapassou 255
  last_octet = 0 if last_octet > 255
  
  # Atualiza o último octeto no array de octetos
  octets[-1] = last_octet.to_s
  
  # Retorna o endereço IP modificado
  octets.join('.')
end

def config_node_networks(cc, node)
  networks = cc["networks"]
  puts networks
  networks.each do | net_name, settings |
    if net_name == "default" || net_name in node_networks
    node.vm.network "private_network", ip: settings["network"]
    settings["network"] = increase_last_octet(settings["network"]) 
  end
end

def create_machine(config, cc, node)
  role = node[0]
  params = node[1]
  
  puts "Node_role: #{role}"
  puts "params: #{params}"

  (0..(params["quantity"]-1)).each do |i|
    hostname = "#{CLUSTER_NAME}-#{role}-#{i}"
   
    puts "#{hostname}"
 
    config.vm.define "#{hostname}" do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.name = "#{hostname}"
        vb.cpus = params["cpus"]
        vb.memory = params["memory"]
      end
      puts "oi"
      config_node_networks(cc, node)
    end 
  end
end

##################################
##       VAGRANT FUNCTION       ##
##################################
Vagrant.configure("2") do |config|
  config.vm.box = BOX_NAME
  config.vm.synced_folder (SHARED_PATH + "/"), "/#{SHARED_PATH}"

  nodes.each do | node |
    create_machine(config, cc, node)
  end
end














